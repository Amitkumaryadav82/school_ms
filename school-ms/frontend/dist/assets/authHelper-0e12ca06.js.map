{"version":3,"file":"authHelper-0e12ca06.js","sources":["../../src/services/authHelper.ts"],"sourcesContent":["/**\r\n * Helper functions for CORS and authentication related tasks\r\n */\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport config from '../config/environment';\r\n\r\n/**\r\n * Creates a fetch function specifically for authentication requests\r\n * This adds all the necessary headers to avoid CORS preflight issues\r\n */\r\nexport const createAuthRequest = () => {\r\n  const authClient = axios.create({\r\n    baseURL: config.apiUrl,\r\n    timeout: config.apiTimeout,\r\n    withCredentials: true,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\r\n      'Pragma': 'no-cache',\r\n      'Expires': '0'\r\n    }\r\n  });\r\n  \r\n  // Add request/response interceptors similar to the main API client\r\n  authClient.interceptors.request.use(config => {\r\n    // Log auth requests for debugging\r\n    console.log(`Auth request to ${config.url}`, {\r\n      method: config.method,\r\n      headers: config.headers,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return config;\r\n  });\r\n  \r\n  authClient.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n      console.error('Auth Request Error:', {\r\n        status: error.response?.status,\r\n        statusText: error.response?.statusText,\r\n        data: error.response?.data,\r\n        url: error.config?.url,\r\n        method: error.config?.method,\r\n        headers: error.config?.headers\r\n      });\r\n      \r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  \r\n  return authClient;\r\n};\r\n\r\n/**\r\n * Direct fetch method for authentication endpoints that bypasses normal API\r\n * Use this for login/register when experiencing CORS issues\r\n */\r\nexport const authFetch = async <T>(endpoint: string, data: any): Promise<T> => {\r\n  const authClient = createAuthRequest();\r\n  \r\n  try {\r\n    // Ensure endpoint has proper format\r\n    let url = endpoint;\r\n    if (!url.startsWith('/') && !url.startsWith('http')) {\r\n      url = `/api/${endpoint}`;\r\n    } else if (url.startsWith('/') && !url.startsWith('/api/')) {\r\n      url = `/api${url}`;\r\n    }\r\n    \r\n    // Make the request with all necessary headers\r\n    const response = await authClient.post<T>(url, data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Auth fetch failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default { authFetch, createAuthRequest };\r\n"],"names":["createAuthRequest","authClient","axios","config","response","error","_a","_b","_c","_d","_e","_f","authFetch","endpoint","data","url","authHelper"],"mappings":"sJAUO,MAAMA,EAAoB,IAAM,CAC/B,MAAAC,EAAaC,EAAM,OAAO,CAC9B,QAASC,EAAO,OAChB,QAASA,EAAO,WAChB,gBAAiB,GACjB,QAAS,CACP,eAAgB,mBAChB,gBAAiB,sCACjB,OAAU,WACV,QAAW,GACb,CAAA,CACD,EAGD,OAAAF,EAAW,aAAa,QAAQ,IAAIE,IAElC,QAAQ,IAAI,mBAAmBA,EAAO,GAAG,GAAI,CAC3C,OAAQA,EAAO,OACf,QAASA,EAAO,QAChB,UAAW,IAAI,KAAK,EAAE,YAAY,CAAA,CACnC,EAEMA,EACR,EAEDF,EAAW,aAAa,SAAS,IACnBG,GAAAA,EACHC,GAAA,iBACP,eAAQ,MAAM,sBAAuB,CACnC,QAAQC,EAAAD,EAAM,WAAN,YAAAC,EAAgB,OACxB,YAAYC,EAAAF,EAAM,WAAN,YAAAE,EAAgB,WAC5B,MAAMC,EAAAH,EAAM,WAAN,YAAAG,EAAgB,KACtB,KAAKC,EAAAJ,EAAM,SAAN,YAAAI,EAAc,IACnB,QAAQC,EAAAL,EAAM,SAAN,YAAAK,EAAc,OACtB,SAASC,EAAAN,EAAM,SAAN,YAAAM,EAAc,OAAA,CACxB,EAEM,QAAQ,OAAON,CAAK,CAC7B,CAAA,EAGKJ,CACT,EAMaW,EAAY,MAAUC,EAAkBC,IAA0B,CAC7E,MAAMb,EAAaD,IAEf,GAAA,CAEF,IAAIe,EAAMF,EACN,MAAA,CAACE,EAAI,WAAW,GAAG,GAAK,CAACA,EAAI,WAAW,MAAM,EAChDA,EAAM,QAAQF,CAAQ,GACbE,EAAI,WAAW,GAAG,GAAK,CAACA,EAAI,WAAW,OAAO,IACvDA,EAAM,OAAOA,CAAG,KAID,MAAMd,EAAW,KAAQc,EAAKD,CAAI,GACnC,WACTT,EAAO,CACN,cAAA,MAAM,qBAAsBA,CAAK,EACnCA,CACR,CACF,EAEAW,EAAe,CAAE,UAAAJ,EAAW,kBAAAZ,CAAkB"}