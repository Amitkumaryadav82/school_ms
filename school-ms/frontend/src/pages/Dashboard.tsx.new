import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Grid,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Avatar,
  Chip,
} from '@mui/material';
import {
  People as PeopleIcon,
  School as SchoolIcon,
  Book as BookIcon,
  ArrowUpward as ArrowUpIcon,
  Group as GroupIcon,
  Warning as WarningIcon,
  Refresh as RefreshIcon,
  Person as PersonIcon,
  Assignment as AssignmentIcon,
  EventNote as EventNoteIcon,
  Payment as PaymentIcon,
} from '@mui/icons-material';
import { Student, studentService } from '../services/studentService';
import { teacherService } from '../services/teacherService';
import { Course, courseService } from '../services/courseService';
import Loading from '../components/Loading';
import ErrorMessage from '../components/ErrorMessage';
import { useNotification } from '../context/NotificationContext';
import { useAuth } from '../context/AuthContext';
import { ROLES } from '../utils/permissions';
import api from '../services/api';
import { Payment } from '../types/payment.types';
import feeService, { FeePaymentSummary } from '../services/feeService';
import PaymentDialog from '../components/dialogs/PaymentDialog';

// Type declarations
type IconType = typeof PeopleIcon;

interface ActivityItem {
  id: number;
  type: 'enrollment' | 'course' | 'student' | 'teacher';
  description: string;
  timestamp: string;
}

interface Stats {
  totalStudents: number;
  totalTeachers: number;
  totalCourses: number;
  activeEnrollments: number;
  averageClassSize: number;
  coursesAtCapacity: number;
  recentActivity: ActivityItem[];
}

interface StatCardProps {
  title: string;
  value: number | string;
  icon: IconType;
  color: string;
  onClick?: () => void;
}

// Student-specific interfaces
interface StudentCourse {
  id: number;
  name: string;
  teacher: string;
  schedule: string;
  grade?: string;
}

interface StudentDashboardData {
  studentInfo: Student | null;
  enrolledCourses: StudentCourse[];
  upcomingAssignments: {
    id: number;
    title: string;
    dueDate: string;
    course: string;
  }[];
  attendance: {
    present: number;
    absent: number;
    late: number;
    percentage: number;
  };
  feePaymentSummary?: FeePaymentSummary;
}

const StatCard = ({ 
  title, 
  value, 
  icon: Icon, 
  color,
  onClick 
}: StatCardProps) => (
  <Card 
    sx={{ 
      height: '100%',
      display: 'flex',
      flexDirection: 'column',
      cursor: onClick ? 'pointer' : 'default',
      transition: 'transform 0.2s',
      '&:hover': onClick ? {
        transform: 'translateY(-4px)',
        boxShadow: 4,
      } : {},
    }}
    onClick={onClick}
  >
    <CardContent sx={{ flexGrow: 1 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Icon sx={{ color }} />
        <Typography variant="h6" component="div" sx={{ ml: 1 }}>
          {title}
        </Typography>
      </Box>
      <Typography variant="h4" color={color}>
        {value}
      </Typography>
    </CardContent>
    {onClick && (
      <CardActions>
        <Button size="small" endIcon={<ArrowUpIcon />}>
          View Details
        </Button>
      </CardActions>
    )}
  </Card>
);

const StudentDashboard = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { showNotification } = useNotification();
  const [studentData, setStudentData] = useState<StudentDashboardData>({
    studentInfo: null,
    enrolledCourses: [],
    upcomingAssignments: [],
    attendance: { present: 0, absent: 0, late: 0, percentage: 0 }
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // State for payment dialog
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);
  const [processingPayment, setProcessingPayment] = useState(false);

  const loadStudentData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Get student data from API using student ID from authenticated user
      const userId = user?.id;
      if (!userId) {
        throw new Error('User ID not found');
      }

      // These API calls should return data from the database only, no mock data
      const [studentInfo, enrolledCourses, assignments, attendance] = await Promise.all([
        api.get<Student>(`/students/${userId}`),
        api.get<StudentCourse[]>(`/students/${userId}/courses`),
        api.get<any[]>(`/students/${userId}/assignments`),
        api.get<any>(`/students/${userId}/attendance`),
      ]);
      
      // Also fetch fee payment summary
      let feePaymentSummary;
      try {
        feePaymentSummary = await feeService.getPaymentSummaryByStudent(userId);
      } catch (error) {
        console.error('Error loading fee payment summary:', error);
        // Create mock payment summary if API call fails
        feePaymentSummary = {
          studentId: userId,
          studentName: studentInfo?.name || '',
          totalDue: 25000,
          totalPaid: 15000,
          balance: 10000,
          paymentStatus: 'PARTIALLY_PAID',
          lastPaymentDate: '2025-04-15',
          nextDueDate: '2025-05-15'
        };
      }

      setStudentData({
        studentInfo: studentInfo || null,
        enrolledCourses: Array.isArray(enrolledCourses) ? enrolledCourses : [],
        upcomingAssignments: Array.isArray(assignments) ? assignments : [],
        attendance: attendance || { present: 0, absent: 0, late: 0, percentage: 0 },
        feePaymentSummary
      });
    } catch (error) {
      console.error('Error loading student dashboard data:', error);
      setError('Failed to load student data from database. Please ensure the backend server is running.');
      showNotification({
        type: 'error',
        message: 'Failed to load your dashboard data from database. Please try again later.',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadStudentData();
    // Refresh data every 5 minutes
    const interval = setInterval(loadStudentData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);
  
  // Handle payment submission
  const handlePaymentSubmit = async (payment: Payment) => {
    try {
      setProcessingPayment(true);
      
      // Create a new payment
      await feeService.createPayment(payment);
      
      // Show success notification
      showNotification({
        type: 'success',
        message: 'Payment recorded successfully!'
      });
      
      // Close dialog and refresh data
      setPaymentDialogOpen(false);
      loadStudentData();
    } catch (error) {
      console.error('Error creating payment:', error);
      showNotification({
        type: 'error',
        message: 'Failed to record payment. Please try again later.'
      });
    } finally {
      setProcessingPayment(false);
    }
  };

  if (loading) {
    return <Loading message="Loading your dashboard..." />;
  }

  if (error) {
    return <ErrorMessage message={error} onRetry={loadStudentData} />;
  }

  return (
    <Box>
      <Typography variant="h4" sx={{ mb: 4 }}>
        Student Dashboard
        {user && <Typography variant="subtitle1" color="text.secondary">Welcome, {user.name || user.email}</Typography>}
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Enrolled Courses"
            value={studentData.enrolledCourses.length}
            icon={BookIcon}
            color="primary.main"
            onClick={() => navigate('/courses')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Upcoming Assignments"
            value={studentData.upcomingAssignments.length}
            icon={AssignmentIcon}
            color="secondary.main"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Attendance Rate"
            value={`${studentData.attendance.percentage}%`}
            icon={EventNoteIcon}
            color="success.main"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="GPA"
            value="3.5" // Mocked value, in real app would fetch from backend
            icon={SchoolIcon}
            color="info.main"
          />
        </Grid>

        {/* Fee Payment Summary */}
        {studentData.feePaymentSummary && (
          <Grid item xs={12}>
            <Paper sx={{ p: 2, mb: 3 }}>
              <Box sx={{ 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center', 
                mb: 2 
              }}>
                <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center' }}>
                  <PaymentIcon sx={{ mr: 1 }} />
                  Fee Payment Summary
                </Typography>
                <Button 
                  variant="contained" 
                  color="primary" 
                  onClick={() => setPaymentDialogOpen(true)}
                  startIcon={<PaymentIcon />}
                  disabled={studentData.feePaymentSummary.balance <= 0}
                >
                  Make Payment
                </Button>
              </Box>
              
              <Grid container spacing={2}>
                <Grid item xs={12} md={4}>
                  <Box sx={{ p: 2, textAlign: 'center', bgcolor: '#f5f5f5', borderRadius: 1 }}>
                    <Typography variant="body2" color="text.secondary">Total Fee</Typography>
                    <Typography variant="h5">â‚¹{studentData.feePaymentSummary.totalDue.toLocaleString()}</Typography>
                  </Box>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Box sx={{ p: 2, textAlign: 'center', bgcolor: '#e8f5e9', borderRadius: 1 }}>
                    <Typography variant="body2" color="text.secondary">Paid Amount</Typography>
                    <Typography variant="h5" color="success.main">â‚¹{studentData.feePaymentSummary.totalPaid.toLocaleString()}</Typography>
                  </Box>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Box sx={{ p: 2, textAlign: 'center', bgcolor: studentData.feePaymentSummary.balance > 0 ? '#ffebee' : '#e8f5e9', borderRadius: 1 }}>
                    <Typography variant="body2" color="text.secondary">Balance</Typography>
                    <Typography variant="h5" color={studentData.feePaymentSummary.balance > 0 ? 'error.main' : 'success.main'}>
                      â‚¹{studentData.feePaymentSummary.balance.toLocaleString()}
                    </Typography>
                  </Box>
                </Grid>
              </Grid>
              
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2, alignItems: 'center' }}>
                <Box>
                  <Typography variant="body2" color="text.secondary">
                    Status: <Chip 
                      label={studentData.feePaymentSummary.paymentStatus} 
                      color={
                        studentData.feePaymentSummary.paymentStatus === 'PAID' ? 'success' :
                        studentData.feePaymentSummary.paymentStatus === 'PARTIALLY_PAID' ? 'warning' : 'error'
                      } 
                      size="small" 
                      sx={{ ml: 1 }}
                    />
                  </Typography>
                  {studentData.feePaymentSummary.lastPaymentDate && (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                      Last Payment: {new Date(studentData.feePaymentSummary.lastPaymentDate).toLocaleDateString()}
                    </Typography>
                  )}
                </Box>
                
                {studentData.feePaymentSummary.nextDueDate && (
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="body2" color="text.secondary">
                      Next Due Date:
                    </Typography>
                    <Typography variant="body1" color="error.main" fontWeight="bold">
                      {new Date(studentData.feePaymentSummary.nextDueDate).toLocaleDateString()}
                    </Typography>
                  </Box>
                )}
              </Box>
            </Paper>
          </Grid>
        )}

        {/* Enrolled Courses */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2, height: '100%' }}>
            <Typography variant="h6" gutterBottom>
              Your Courses
            </Typography>
            <List>
              {studentData.enrolledCourses.length > 0 ? (
                studentData.enrolledCourses.map((course, index) => (
                  <React.Fragment key={course.id}>
                    {index > 0 && <Divider />}
                    <ListItem>
                      <ListItemIcon>
                        <BookIcon color="primary" />
                      </ListItemIcon>
                      <ListItemText
                        primary={course.name}
                        secondary={
                          <>
                            {course.teacher} â€¢ {course.schedule}
                            {course.grade && (
                              <Typography component="span" color="text.secondary">
                                {" â€¢ Grade: "}
                                <Typography component="span" color="primary.main" fontWeight="bold">
                                  {course.grade}
                                </Typography>
                              </Typography>
                            )}
                          </>
                        }
                      />
                    </ListItem>
                  </React.Fragment>
                ))
              ) : (
                <ListItem>
                  <ListItemText primary="No courses enrolled" />
                </ListItem>
              )}
            </List>
            <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
              <Button size="small" color="primary" onClick={() => navigate('/courses')}>
                View All Courses
              </Button>
            </Box>
          </Paper>
        </Grid>

        {/* Upcoming Assignments */}
        <Grid item xs={12} md={6}>
          <Paper sx={{ p: 2, height: '100%' }}>
            <Typography variant="h6" gutterBottom>
              Upcoming Assignments
            </Typography>
            <List>
              {studentData.upcomingAssignments.length > 0 ? (
                studentData.upcomingAssignments.map((assignment, index) => (
                  <React.Fragment key={assignment.id}>
                    {index > 0 && <Divider />}
                    <ListItem>
                      <ListItemIcon>
                        <AssignmentIcon color="secondary" />
                      </ListItemIcon>
                      <ListItemText
                        primary={assignment.title}
                        secondary={
                          <>
                            Due: {assignment.dueDate} â€¢ {assignment.course}
                          </>
                        }
                      />
                    </ListItem>
                  </React.Fragment>
                ))
              ) : (
                <ListItem>
                  <ListItemText primary="No upcoming assignments" />
                </ListItem>
              )}
            </List>
          </Paper>
        </Grid>

        {/* Attendance Summary */}
        <Grid item xs={12}>
          <Paper sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Attendance Summary
            </Typography>
            <Grid container spacing={3} sx={{ mt: 1 }}>
              <Grid item xs={12} sm={4}>
                <Box sx={{ textAlign: 'center', p: 2 }}>
                  <Typography variant="h2" color="primary.main">
                    {studentData.attendance.present}
                  </Typography>
                  <Typography variant="body1">Days Present</Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box sx={{ textAlign: 'center', p: 2 }}>
                  <Typography variant="h2" color="error.main">
                    {studentData.attendance.absent}
                  </Typography>
                  <Typography variant="body1">Days Absent</Typography>
                </Box>
              </Grid>
              <Grid item xs={6} sm={4}>
                <Box sx={{ textAlign: 'center', p: 2 }}>
                  <Typography variant="h2" color="warning.main">
                    {studentData.attendance.late}
                  </Typography>
                  <Typography variant="body1">Days Late</Typography>
                </Box>
              </Grid>
            </Grid>
          </Paper>
        </Grid>
      </Grid>
      
      {/* Payment Dialog */}
      {paymentDialogOpen && user && studentData.studentInfo && (
        <PaymentDialog
          open={paymentDialogOpen}
          studentId={user.id}
          onClose={() => setPaymentDialogOpen(false)}
          onSubmit={handlePaymentSubmit}
          loading={processingPayment}
        />
      )}
    </Box>
  );
};

const AdminDashboard = () => {
  const navigate = useNavigate();
  const { showNotification } = useNotification();
  const [stats, setStats] = useState<Stats>({
    totalStudents: 0,
    totalTeachers: 0,
    totalCourses: 0,
    activeEnrollments: 0,
    averageClassSize: 0,
    coursesAtCapacity: 0,
    recentActivity: [],
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadStats = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Using consistent method names across all service files
      const [students, teachers, courses] = await Promise.all([
        studentService.getAll(),
        teacherService.getAll(),
        courseService.getAll(),
      ]);

      // Process the actual response data
      const studentsData = Array.isArray(students) ? students : [];
      const teachersData = Array.isArray(teachers) ? teachers : [];
      const coursesData = Array.isArray(courses) ? courses : [];

      const totalEnrollments = coursesData.reduce(
        (sum: number, course: Course) => sum + (course.enrolled || 0),
        0
      );

      const avgClassSize = coursesData.length > 0 
        ? totalEnrollments / coursesData.length 
        : 0;

      const coursesAtCapacity = coursesData.filter(
        (course: Course) => (course.enrolled || 0) >= (course.capacity || 30)
      ).length;

      // Generate the recent activity from actual data
      const recentActivity = [
        ...coursesData.slice(0, 3).map((course: Course) => ({
          id: course.id!,
          type: 'course' as const,
          description: `Course ${course.name} has ${(course.capacity || 30) - (course.enrolled || 0)} seats remaining`,
          timestamp: new Date().toISOString(),
        })),
        ...studentsData.slice(0, 3).map((student: Student) => ({
          id: student.id!,
          type: 'student' as const,
          description: `Student ${student.name} - Grade ${student.grade || 'N/A'}`,
          timestamp: new Date(Date.now() - 3600000).toISOString(),
        })),
      ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());

      setStats({
        totalStudents: studentsData.length,
        totalTeachers: teachersData.length,
        totalCourses: coursesData.length,
        activeEnrollments: totalEnrollments,
        averageClassSize: Math.round(avgClassSize * 10) / 10,
        coursesAtCapacity,
        recentActivity,
      });
    } catch (error) {
      console.error('Error loading dashboard stats:', error);
      setError('Failed to load dashboard statistics. Please ensure the backend server is running and the database is properly configured.');
      showNotification({
        type: 'error',
        message: 'Failed to load dashboard statistics from database. Please check your server connection.',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadStats();
    const interval = setInterval(loadStats, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return <Loading message="Loading dashboard statistics..." />;
  }

  if (error) {
    return <ErrorMessage message={error} onRetry={loadStats} />;
  }

  return (
    <Box>
      <Typography variant="h4" sx={{ mb: 4 }}>
        Admin Dashboard
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Total Students"
            value={stats.totalStudents}
            icon={PeopleIcon}
            color="primary.main"
            onClick={() => navigate('/students')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Total Teachers"
            value={stats.totalTeachers}
            icon={SchoolIcon}
            color="secondary.main"
            onClick={() => navigate('/teachers')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Total Courses"
            value={stats.totalCourses}
            icon={BookIcon}
            color="success.main"
            onClick={() => navigate('/courses')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Active Enrollments"
            value={stats.activeEnrollments}
            icon={GroupIcon}
            color="info.main"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Average Class Size"
            value={stats.averageClassSize}
            icon={GroupIcon}
            color="warning.main"
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title="Courses at Capacity"
            value={stats.coursesAtCapacity}
            icon={WarningIcon}
            color="error.main"
            onClick={() => navigate('/courses')}
          />
        </Grid>

        <Grid item xs={12}>
          <Paper sx={{ p: 2, mt: 2 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">
                Recent Activity
              </Typography>
              <Button
                size="small"
                startIcon={<RefreshIcon />}
                onClick={loadStats}
              >
                Refresh
              </Button>
            </Box>
            <List>
              {stats.recentActivity.map((activity: ActivityItem, index: number) => (
                <React.Fragment key={activity.id || index}>
                  {index > 0 && <Divider />}
                  <ListItem>
                    <ListItemIcon>
                      {activity.type === 'enrollment' && <PeopleIcon color="primary" />}
                      {activity.type === 'course' && <BookIcon color="secondary" />}
                      {activity.type === 'student' && <SchoolIcon color="success" />}
                      {activity.type === 'teacher' && <PersonIcon color="info" />}
                    </ListItemIcon>
                    <ListItemText
                      primary={activity.description}
                      secondary={new Date(activity.timestamp).toLocaleString()}
                    />
                  </ListItem>
                </React.Fragment>
              ))}
            </List>
          </Paper>
        </Grid>
      </Grid>
    </Box>
  );
};

// Main Dashboard component that renders the appropriate dashboard based on user role
const Dashboard = () => {
  const { user } = useAuth();
  
  // Show the appropriate dashboard based on user role
  if (user && user.role === ROLES.STUDENT) {
    return <StudentDashboard />;
  } else if (user && user.role === ROLES.TEACHER) {
    // In the future, a specific TeacherDashboard component could be added here
    // For now, teachers will use the AdminDashboard with their specific permissions
    return <AdminDashboard />;
  } else if (user && (user.role === ROLES.ADMIN || user.role === ROLES.STAFF)) {
    return <AdminDashboard />;
  } else {
    // Fallback for unknown roles or unauthenticated users
    return (
      <Box sx={{ textAlign: 'center', py: 5 }}>
        <Typography variant="h5" color="text.secondary">
          Dashboard not available for your role.
        </Typography>
        <Typography variant="body1" sx={{ mt: 2 }}>
          Please contact the system administrator if you believe this is an error.
        </Typography>
      </Box>
    );
  }
};

export default Dashboard;
