import { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Paper,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Tab,
  Tabs,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';
import { AxiosResponse } from 'axios';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import { 
  CloudDownload as DownloadIcon,
  Description as DescriptionIcon,
  GetApp as GetAppIcon
} from '@mui/icons-material';
import { Course, courseService } from '../services/courseService';
import { Student, studentService } from '../services/studentService';
import { Teacher, teacherService } from '../services/teacherService';
import feeService from '../services/feeService';
import Loading from '../components/Loading';
import ErrorMessage from '../components/ErrorMessage';
import FeeReportsTable from '../components/FeeReportsTable';
import { useNotification } from '../context/NotificationContext';
import { SelectChangeEvent } from '@mui/material';
import React from 'react';

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

interface EnrollmentData {
  courseName: string;
  enrolled: number;
  capacity: number;
  availableSeats: number;
}

interface DepartmentStats {
  name: string;
  students: number;
  teachers: number;
  courses: number;
}

// TabPanel component for tabbed interface
interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

const TabPanel = (props: TabPanelProps) => {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`reports-tabpanel-${index}`}
      aria-labelledby={`reports-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
};

const Reports = () => {
  const { showNotification } = useNotification();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [courses, setCourses] = useState<Course[]>([]);
  const [students, setStudents] = useState<Student[]>([]);
  const [teachers, setTeachers] = useState<Teacher[]>([]);
  const [reportType, setReportType] = useState('enrollment');
  
  // For tabbed navigation
  const [tabValue, setTabValue] = useState(0);
  
  // For fee reports
  const [feeReportType, setFeeReportType] = useState<'all' | 'byClass'>('all');
  const [selectedClassGrade, setSelectedClassGrade] = useState<number | null>(null);
  const [selectedFeeReportType, setSelectedFeeReportType] = useState<'students-with-fees-due' | 'fee-payment-status' | ''>('');
  const [feeReportData, setFeeReportData] = useState<any[]>([]);
  const [loadingFeeReport, setLoadingFeeReport] = useState(false);
  const [feeReportError, setFeeReportError] = useState<string | null>(null);

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      // Each service returns data in a potentially different format, handle accordingly
      const coursesResult = await courseService.getAll();
      const studentsResult = await studentService.getAll();
      const teachersResult = await teacherService.getAll();
      
      // Process each response separately with proper type assertions
      if (Array.isArray(coursesResult)) {
        // Direct array response
        setCourses(coursesResult as Course[]);
      } else {
        // Assume AxiosResponse with data property
        const axiosResult = coursesResult as any;
        setCourses(Array.isArray(axiosResult.data) ? axiosResult.data : []);
      }
      
      if (Array.isArray(studentsResult)) {
        // Direct array response
        setStudents(studentsResult as Student[]);
      } else {
        // Assume AxiosResponse with data property
        const axiosResult = studentsResult as any;
        setStudents(Array.isArray(axiosResult.data) ? axiosResult.data : []);
      }
      
      if (Array.isArray(teachersResult)) {
        // Direct array response
        setTeachers(teachersResult as Teacher[]);
      } else {
        // Assume AxiosResponse with data property
        const axiosResult = teachersResult as any;
        setTeachers(Array.isArray(axiosResult.data) ? axiosResult.data : []);
      }
    } catch (error) {
      console.error('Error loading report data:', error);
      setError('Failed to load report data. Please try again.');
      showNotification({
        type: 'error',
        message: 'Failed to load report data',
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // Fee report generation methods
  const handleGenerateFeeReport = async (reportType: 'students-with-fees-due' | 'fee-payment-status') => {
    setSelectedFeeReportType(reportType);
    setLoadingFeeReport(true);
    setFeeReportError(null);
    
    try {
      // For the MVP, we'll use mock data
      setFeeReportData([{ type: reportType }]); // Just a placeholder to indicate report has been generated
      
      // Commented out until backend endpoints are ready
      /*
      let data: any[];
      if (reportType === 'students-with-fees-due') {
        data = await feeService.generateFeesDueReport(feeReportType === 'byClass' ? selectedClassGrade : null);
      } else {
        data = await feeService.generateFeeStatusReport(feeReportType === 'byClass' ? selectedClassGrade : null);
      }
      setFeeReportData(data);
      */
    } catch (error) {
      console.error('Error generating fee report:', error);
      setFeeReportError('Failed to generate report. Please try again.');
      showNotification({
        type: 'error',
        message: 'Failed to generate fee report',
      });
    } finally {
      setLoadingFeeReport(false);
    }
  };
  
  const handleDownloadFeeReport = async () => {
    if (!selectedFeeReportType) {
      showNotification({
        type: 'error',
        message: 'Please select a report type first',
      });
      return;
    }
    
    try {
      // For the MVP, we'll create a simple CSV download
      const headers = "Student ID,Student Name,Total Due,Total Paid,Balance,Status,Last Payment,Next Due Date\n";
      let csvContent = headers;
      
      // Sample data for demonstration
      const mockData = selectedFeeReportType === 'students-with-fees-due' ? 
        [
          "1001,John Doe,15000,10000,5000,PARTIALLY_PAID,2025-03-15,2025-06-01",
          "1002,Jane Smith,15000,0,15000,UNPAID,,2025-05-15",
          "1003,Michael Brown,15000,5000,10000,PARTIALLY_PAID,2025-02-10,2025-05-15"
        ] :
        [
          "1001,John Doe,15000,10000,5000,PARTIALLY_PAID,2025-03-15,2025-06-01",
          "1002,Jane Smith,15000,0,15000,UNPAID,,2025-05-15",
          "1003,Michael Brown,15000,5000,10000,PARTIALLY_PAID,2025-02-10,2025-05-15",
          "1004,Sarah Johnson,15000,15000,0,PAID,2025-01-15,2025-06-15"
        ];
        
      csvContent += mockData.join("\n");
      
      // Create a download link
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `${selectedFeeReportType}-${feeReportType === 'byClass' ? 'grade-' + selectedClassGrade : 'all'}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      showNotification({
        type: 'success',
        message: 'Report downloaded successfully',
      });
    } catch (error) {
      console.error('Error downloading fee report:', error);
      showNotification({
        type: 'error',
        message: 'Error downloading report',
      });
    }
  };

  const enrollmentData: EnrollmentData[] = courses.map((course: Course) => ({
    courseName: course.name,
    enrolled: number;
    capacity: number;
    availableSeats: number;
  }));

  const departmentStats: DepartmentStats[] = courses.reduce((acc: DepartmentStats[], course: Course) => {
    const dept = acc.find((d: DepartmentStats) => d.name === course.department);
    if (dept) {
      dept.courses += 1;
      // Count students as the sum of enrollments in the department
      dept.students = courses
        .filter(c => c.department === course.department)
        .reduce((sum, c) => sum + c.enrolled, 0);
    } else {
      acc.push({
        name: course.department,
        courses: 1,
        students: courses
          .filter(c => c.department === course.department)
          .reduce((sum, c) => sum + c.enrolled, 0),
        teachers: teachers.filter((t: Teacher) => t.department === course.department).length,
      });
    }
    return acc;
  }, [] as DepartmentStats[]);

  const exportData = () => {
    let data: any[] = [];
    let filename = '';

    switch (reportType) {
      case 'enrollment':
        data = enrollmentData;
        filename = 'enrollment-report.csv';
        break;
      case 'department':
        data = departmentStats;
        filename = 'department-stats.csv';
        break;
      default:
        return;
    }

    const csvContent = 
      'data:text/csv;charset=utf-8,' + 
      Object.keys(data[0]).join(',') + '\\n' + 
      data.map(row => Object.values(row).join(',')).join('\\n');

    const link = document.createElement('a');
    link.href = encodeURI(csvContent);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  if (loading && tabValue === 0) {
    return <Loading message="Loading report data..." />;
  }

  if (error && tabValue === 0) {
    return <ErrorMessage message={error} onRetry={loadData} />;
  }

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4 }}>
        <Typography variant="h4">Reports & Analytics</Typography>
        {tabValue === 0 && (
          <Button
            variant="contained"
            startIcon={<DownloadIcon />}
            onClick={exportData}
          >
            Export Report
          </Button>
        )}
      </Box>

      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Tabs value={tabValue} onChange={handleTabChange} aria-label="reports tabs">
          <Tab label="Academic Reports" />
          <Tab label="Fee Reports" />
        </Tabs>
      </Box>

      <TabPanel value={tabValue} index={0}>
        <FormControl sx={{ mb: 4, minWidth: 200 }}>
          <InputLabel>Report Type</InputLabel>
          <Select
            value={reportType}
            label="Report Type"
            onChange={(e: SelectChangeEvent) => setReportType(e.target.value)}
          >
            <MenuItem value="enrollment">Course Enrollment</MenuItem>
            <MenuItem value="department">Department Statistics</MenuItem>
          </Select>
        </FormControl>

      {reportType === 'enrollment' && (
        <Grid container spacing={4}>
          <Grid item xs={12}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>Course Enrollment Distribution</Typography>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={enrollmentData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="courseName" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="enrolled" fill="#8884d8" name="Enrolled" />
                  <Bar dataKey="availableSeats" fill="#82ca9d" name="Available Seats" />
                </BarChart>
              </ResponsiveContainer>
            </Paper>
          </Grid>
          
          <Grid item xs={12}>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Course</TableCell>
                    <TableCell align="right">Enrolled</TableCell>
                    <TableCell align="right">Capacity</TableCell>
                    <TableCell align="right">Available Seats</TableCell>
                    <TableCell align="right">Fill Rate (%)</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {enrollmentData.map((row) => (
                    <TableRow key={row.courseName}>
                      <TableCell>{row.courseName}</TableCell>
                      <TableCell align="right">{row.enrolled}</TableCell>
                      <TableCell align="right">{row.capacity}</TableCell>
                      <TableCell align="right">{row.availableSeats}</TableCell>
                      <TableCell align="right">
                        {((row.enrolled / row.capacity) * 100).toFixed(1)}%
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Grid>
        </Grid>
      )}

      {reportType === 'department' && (
        <Grid container spacing={4}>
          <Grid item xs={12} md={6}>
            <Paper sx={{ p: 3 }}>
              <Typography variant="h6" sx={{ mb: 2 }}>Department Distribution</Typography>
              <ResponsiveContainer width="100%" height={400}>
                <PieChart>
                  <Pie
                    data={departmentStats}
                    dataKey="courses"
                    nameKey="name"
                    cx="50%"
                    cy="50%"
                    label
                  >
                    {departmentStats.map((entry, index) => (
                      <Cell key={entry.name} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </Paper>
          </Grid>

          <Grid item xs={12} md={6}>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Department</TableCell>
                    <TableCell align="right">Courses</TableCell>
                    <TableCell align="right">Teachers</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {departmentStats.map((row) => (
                    <TableRow key={row.name}>
                      <TableCell>{row.name}</TableCell>
                      <TableCell align="right">{row.courses}</TableCell>
                      <TableCell align="right">{row.teachers}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Grid>
        </Grid>      )}
      </TabPanel>
      
      <TabPanel value={tabValue} index={1}>
        <Box sx={{ mb: 4 }}>
          <Typography variant="h6" gutterBottom>Fee Reports</Typography>
          <Paper sx={{ p: 3 }}>
            <Grid container spacing={2}>
              <Grid item xs={12}>
                <Typography variant="subtitle1" gutterBottom>Select Report Type</Typography>
                <Grid container spacing={2}>
                  <Grid item>
                    <Button
                      variant={feeReportType === 'all' ? 'contained' : 'outlined'}
                      onClick={() => setFeeReportType('all')}
                    >
                      All Classes
                    </Button>
                  </Grid>
                  <Grid item>
                    <Button
                      variant={feeReportType === 'byClass' ? 'contained' : 'outlined'}
                      onClick={() => setFeeReportType('byClass')}
                    >
                      By Class
                    </Button>
                  </Grid>
                  {feeReportType === 'byClass' && (
                    <Grid item>
                      <FormControl sx={{ minWidth: 120 }}>
                        <InputLabel>Class Grade</InputLabel>
                        <Select
                          value={selectedClassGrade ?? ''}
                          label="Class Grade"
                          onChange={(e) => setSelectedClassGrade(e.target.value ? Number(e.target.value) : null)}
                        >
                          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(grade => (
                            <MenuItem key={grade} value={grade}>Grade {grade}</MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </Grid>
                  )}
                </Grid>
              </Grid>

              <Grid item container spacing={2} sx={{ mt: 2 }}>
                <Grid item>
                  <Button
                    variant="contained"
                    onClick={() => handleGenerateFeeReport('students-with-fees-due')}
                    disabled={(feeReportType === 'byClass' && !selectedClassGrade)}
                  >
                    Students with Fees Due
                  </Button>
                </Grid>
                <Grid item>
                  <Button
                    variant="contained"
                    onClick={() => handleGenerateFeeReport('fee-payment-status')}
                    disabled={(feeReportType === 'byClass' && !selectedClassGrade)}
                  >
                    Fee Payment Status
                  </Button>
                </Grid>
                <Grid item>
                  <Button
                    variant="contained"
                    color="secondary"
                    onClick={handleDownloadFeeReport}
                    disabled={(feeReportType === 'byClass' && !selectedClassGrade) || !selectedFeeReportType}
                    startIcon={<GetAppIcon />}
                  >
                    Download Report
                  </Button>
                </Grid>
              </Grid>
            </Grid>
          </Paper>
        </Box>
        
        <Box sx={{ mt: 3 }}>
          <Typography variant="h6" gutterBottom>Report Results</Typography>
          {loadingFeeReport ? (
            <Loading />
          ) : feeReportError ? (
            <ErrorMessage message={feeReportError} />
          ) : feeReportData && feeReportData.length > 0 ? (
            <FeeReportsTable 
              reportType={selectedFeeReportType}
              classGrade={feeReportType === 'byClass' ? selectedClassGrade : null}
              onDownload={handleDownloadFeeReport}
            />
          ) : (
            <Typography>Select a report type and click Generate to view results</Typography>
          )}
        </Box>
      </TabPanel>
    </Box>
  );
};

export default Reports;