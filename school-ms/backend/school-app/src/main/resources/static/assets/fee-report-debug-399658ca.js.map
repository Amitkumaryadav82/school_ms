{"version":3,"file":"fee-report-debug-399658ca.js","sources":["../../src/utils/fee-report-debug.ts"],"sourcesContent":["/**\r\n * Utility functions for debugging fee reports\r\n */\r\nimport { FeePaymentSummary } from '../services/feeService';\r\n\r\n/**\r\n * Analyze fee report data for potential issues\r\n * @param reportType The type of fee report\r\n * @param classGrade The optional class grade filter\r\n * @param data The report data\r\n * @returns Diagnostic information\r\n */\r\nexport const analyzeFeeReportData = (\r\n  reportType: 'students-with-fees-due' | 'fee-payment-status',\r\n  classGrade: number | null,\r\n  data: any[]\r\n): { \r\n  diagnostics: string[],\r\n  hasIssues: boolean,\r\n  dataValid: boolean\r\n} => {\r\n  const diagnostics: string[] = [];\r\n  let hasIssues = false;\r\n  \r\n  // Check basic data structure\r\n  if (!Array.isArray(data)) {\r\n    diagnostics.push(`Error: Report data is not an array (type: ${typeof data})`);\r\n    return { diagnostics, hasIssues: true, dataValid: false };\r\n  }\r\n  \r\n  // Log record count\r\n  diagnostics.push(`Report type: ${reportType}, Class grade: ${classGrade || 'All'}, Records: ${data.length}`);\r\n  \r\n  if (data.length === 0) {\r\n    diagnostics.push('Warning: No data records in response');\r\n    hasIssues = true;\r\n  }\r\n  \r\n  // Check for missing fields\r\n  const records = data.slice(0, 5); // Examine up to 5 records\r\n  \r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    const recordDiagnostics: string[] = [];\r\n    \r\n    // Check student identification fields\r\n    if (!record.studentId) recordDiagnostics.push('Missing studentId');\r\n    if (!record.studentName && !record.feeName) recordDiagnostics.push('Missing student name (both studentName and feeName are empty)');\r\n    \r\n    // Check fee amount fields\r\n    if (record.totalAmount === undefined && record.totalDue === undefined) \r\n      recordDiagnostics.push('Missing total amount (both totalAmount and totalDue are undefined)');\r\n      \r\n    if (record.paidAmount === undefined && record.totalPaid === undefined)\r\n      recordDiagnostics.push('Missing paid amount (both paidAmount and totalPaid are undefined)');\r\n      \r\n    if (record.remainingAmount === undefined && record.balance === undefined)\r\n      recordDiagnostics.push('Missing balance (both remainingAmount and balance are undefined)');\r\n    \r\n    // Check status fields\r\n    if (record.status === undefined && record.paymentStatus === undefined)\r\n      recordDiagnostics.push('Missing payment status');\r\n      \r\n    if (recordDiagnostics.length > 0) {\r\n      diagnostics.push(`Issues in record ${i + 1} (ID: ${record.studentId || 'unknown'}):`);\r\n      recordDiagnostics.forEach(d => diagnostics.push(`  - ${d}`));\r\n      hasIssues = true;\r\n    }\r\n  }    // Special checks for specific grades that may need extra attention\r\n  if (classGrade !== null) {\r\n    diagnostics.push(`\\nPerforming additional checks for Grade ${classGrade}:`);\r\n    if (data.length === 0) {\r\n      diagnostics.push(`Warning: No data found for Grade ${classGrade}`);\r\n      hasIssues = true;\r\n    }\r\n  }\r\n  \r\n  // Suggest possible fixes\r\n  if (hasIssues) {\r\n    diagnostics.push('\\nPossible solutions:');\r\n    diagnostics.push('1. Check backend FeeService.getFeeStatusReport implementation');\r\n    diagnostics.push('2. Verify that createReportSummary correctly populates all required fields');\r\n    diagnostics.push('3. Ensure the selected grade has properly configured fee structures');\r\n    diagnostics.push('4. Check if students exist for the selected grade and have correctly assigned grade values');\r\n    diagnostics.push('5. Verify special handling for null grades is working correctly');\r\n  } else {\r\n    diagnostics.push('\\nAPI data structure appears valid');\r\n  }\r\n  \r\n  return {\r\n    diagnostics,\r\n    hasIssues,\r\n    dataValid: true, // Even with issues, we can still process the data\r\n  };\r\n};\r\n\r\n/**\r\n * Export all diagnostic functions\r\n */\r\nexport default {\r\n  analyzeFeeReportData\r\n};\r\n"],"names":["analyzeFeeReportData","reportType","classGrade","data","diagnostics","hasIssues","records","record","recordDiagnostics","feeReportDebug"],"mappings":"AAYO,MAAMA,EAAuB,CAClCC,EACAC,EACAC,IAKG,CACH,MAAMC,EAAwB,CAAA,EAC9B,IAAIC,EAAY,GAGhB,GAAI,CAAC,MAAM,QAAQF,CAAI,EACrB,OAAAC,EAAY,KAAK,6CAA6C,OAAOD,CAAI,GAAG,EACrE,CAAE,YAAAC,EAAa,UAAW,GAAM,UAAW,EAAM,EAI9CA,EAAA,KAAK,gBAAgBH,CAAU,kBAAkBC,GAAc,KAAK,cAAcC,EAAK,MAAM,EAAE,EAEvGA,EAAK,SAAW,IAClBC,EAAY,KAAK,sCAAsC,EAC3CC,EAAA,IAId,MAAMC,EAAUH,EAAK,MAAM,EAAG,CAAC,EAE/B,QAAS,EAAI,EAAG,EAAIG,EAAQ,OAAQ,IAAK,CACjC,MAAAC,EAASD,EAAQ,CAAC,EAClBE,EAA8B,CAAA,EAG/BD,EAAO,WAAWC,EAAkB,KAAK,mBAAmB,EAC7D,CAACD,EAAO,aAAe,CAACA,EAAO,SAASC,EAAkB,KAAK,+DAA+D,EAG9HD,EAAO,cAAgB,QAAaA,EAAO,WAAa,QAC1DC,EAAkB,KAAK,oEAAoE,EAEzFD,EAAO,aAAe,QAAaA,EAAO,YAAc,QAC1DC,EAAkB,KAAK,mEAAmE,EAExFD,EAAO,kBAAoB,QAAaA,EAAO,UAAY,QAC7DC,EAAkB,KAAK,kEAAkE,EAGvFD,EAAO,SAAW,QAAaA,EAAO,gBAAkB,QAC1DC,EAAkB,KAAK,wBAAwB,EAE7CA,EAAkB,OAAS,IACjBJ,EAAA,KAAK,oBAAoB,EAAI,CAAC,SAASG,EAAO,WAAa,SAAS,IAAI,EACpFC,EAAkB,QAAa,GAAAJ,EAAY,KAAK,OAAO,CAAC,EAAE,CAAC,EAC/CC,EAAA,GAEhB,CACA,OAAIH,IAAe,OACjBE,EAAY,KAAK;AAAA,yCAA4CF,CAAU,GAAG,EACtEC,EAAK,SAAW,IACNC,EAAA,KAAK,oCAAoCF,CAAU,EAAE,EACrDG,EAAA,KAKZA,GACFD,EAAY,KAAK;AAAA,oBAAuB,EACxCA,EAAY,KAAK,+DAA+D,EAChFA,EAAY,KAAK,4EAA4E,EAC7FA,EAAY,KAAK,qEAAqE,EACtFA,EAAY,KAAK,4FAA4F,EAC7GA,EAAY,KAAK,iEAAiE,GAElFA,EAAY,KAAK;AAAA,iCAAoC,EAGhD,CACL,YAAAA,EACA,UAAAC,EACA,UAAW,EAAA,CAEf,EAKeI,EAAA,CACb,qBAAAT,CACF"}