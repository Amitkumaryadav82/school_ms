package com.school.attendance.service.impl;

import com.school.attendance.dto.EmployeeBulkAttendanceRequest;
import com.school.attendance.dto.EmployeeAttendanceDTO;
import com.school.attendance.model.EmployeeAttendanceStatus;
import com.school.attendance.model.StaffAttendance;
import com.school.attendance.model.StaffAttendanceStatus;
import com.school.attendance.repository.StaffAttendanceRepository;
import com.school.attendance.service.EmployeeAttendanceService;
import com.school.core.model.Staff;
import com.school.core.repository.StaffRepository;
import com.school.hrm.service.HolidayService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Implementation of the EmployeeAttendanceService using database storage
 */
@Service
public class EmployeeAttendanceServiceImpl implements EmployeeAttendanceService {

    private final HolidayService holidayService;
    private final StaffAttendanceRepository staffAttendanceRepository;
    private final StaffRepository staffRepository;
    
    @Autowired
    public EmployeeAttendanceServiceImpl(
        HolidayService holidayService,
        StaffAttendanceRepository staffAttendanceRepository,
        StaffRepository staffRepository
    ) {
        this.holidayService = holidayService;
        this.staffAttendanceRepository = staffAttendanceRepository;
        this.staffRepository = staffRepository;
    }
    
    @Override
    @Transactional
    public EmployeeAttendanceDTO createAttendance(EmployeeAttendanceDTO attendanceDTO) {
        // Check if the date is a holiday, and if so, mark it automatically
        if (isHoliday(attendanceDTO.getAttendanceDate())) {
            attendanceDTO.setStatus(EmployeeAttendanceStatus.HOLIDAY);
            // You might want to add a note about which holiday it is
            Map<String, Boolean> holidayInfo = holidayService.checkIfHoliday(attendanceDTO.getAttendanceDate());
            if (holidayInfo.containsKey("holidayName")) {
                attendanceDTO.setReason("Holiday: " + holidayInfo.get("holidayName"));
            }
        }
        
        // Find the staff entity by employee ID
        Staff staff = staffRepository.findById(attendanceDTO.getEmployeeId())
            .orElseThrow(() -> new EntityNotFoundException("Staff not found with id: " + attendanceDTO.getEmployeeId()));
        
        // Check if attendance record already exists for this staff and date
        StaffAttendance existingAttendance = staffAttendanceRepository.findByStaffIdAndAttendanceDate(
            attendanceDTO.getEmployeeId(), 
            attendanceDTO.getAttendanceDate()
        );
        
        // If exists, update it instead
        if (existingAttendance != null) {
            return updateAttendance(existingAttendance.getId(), attendanceDTO);
        }
        
        // Convert DTO to entity
        StaffAttendance staffAttendance = new StaffAttendance();
        staffAttendance.setStaff(staff);
        staffAttendance.setAttendanceDate(attendanceDTO.getAttendanceDate());
        staffAttendance.setStatus(convertEmployeeStatusToStaffStatus(attendanceDTO.getStatus()));
        staffAttendance.setNote(attendanceDTO.getReason());
        
        // Save to database
        StaffAttendance savedAttendance = staffAttendanceRepository.save(staffAttendance);
        
        // Convert back to DTO and return
        return convertToDTO(savedAttendance);
    }

    @Override
    @Transactional
    public List<EmployeeAttendanceDTO> createBulkAttendance(EmployeeBulkAttendanceRequest request) {
        List<EmployeeAttendanceDTO> createdAttendances = new ArrayList<>();
        LocalDate attendanceDate = request.getAttendanceDate();
        
        // Check if the date is a holiday
        boolean isDateHoliday = isHoliday(attendanceDate);
        
        // Process each employee attendance
        for (Map.Entry<Long, EmployeeAttendanceStatus> entry : request.getAttendanceMap().entrySet()) {
            Long employeeId = entry.getKey();
            
            // Find the staff entity
            Optional<Staff> staffOpt = staffRepository.findById(employeeId);
            if (!staffOpt.isPresent()) {
                continue; // Skip if staff doesn't exist
            }
            Staff staff = staffOpt.get();
            
            // Create attendance DTO
            EmployeeAttendanceDTO attendanceDTO = new EmployeeAttendanceDTO();
            attendanceDTO.setEmployeeId(employeeId);
            attendanceDTO.setAttendanceDate(attendanceDate);
            
            // If it's a holiday, override the status
            if (isDateHoliday) {
                attendanceDTO.setStatus(EmployeeAttendanceStatus.HOLIDAY);
            } else {
                attendanceDTO.setStatus(entry.getValue());
            }
            
            attendanceDTO.setRemarks(request.getRemarks());
            
            // Save attendance
            createdAttendances.add(createAttendance(attendanceDTO));
        }
        
        return createdAttendances;
    }

    @Override
    public Map<String, Object> processAttendanceFile(MultipartFile file, String employeeType) throws Exception {
        // TODO: Implement file processing logic
        Map<String, Object> result = new HashMap<>();
        result.put("success", true);
        result.put("processed", 0);
        result.put("errors", new ArrayList<>());
        return result;
    }

    @Override
    public List<EmployeeAttendanceDTO> getAttendanceByDate(LocalDate date, String employeeType) {
        // Find records for the given date
        List<StaffAttendance> staffAttendanceList = staffAttendanceRepository.findByAttendanceDate(date);
        
        // Convert to DTOs
        List<EmployeeAttendanceDTO> attendanceList = staffAttendanceList.stream()
            .filter(attendance -> filterByEmployeeType(attendance, employeeType))
            .map(this::convertToDTO)
            .collect(Collectors.toList());
        
        return attendanceList;
    }
    
    private boolean filterByEmployeeType(StaffAttendance attendance, String employeeType) {
        if ("ALL".equalsIgnoreCase(employeeType)) {
            return true;
        }
        
        String staffRole = attendance.getStaff().getStaffRole() != null ? 
            attendance.getStaff().getStaffRole().getName() : null;
            
        if ("TEACHING".equalsIgnoreCase(employeeType)) {
            return staffRole != null && staffRole.toLowerCase().contains("teacher");
        } else if ("NON_TEACHING".equalsIgnoreCase(employeeType)) {
            return staffRole == null || !staffRole.toLowerCase().contains("teacher");
        }
        
        return false;
    }

    @Override
    public List<EmployeeAttendanceDTO> getAttendanceByEmployeeId(Long employeeId) {
        // Retrieve attendance records for the employee
        List<StaffAttendance> staffAttendanceList = staffAttendanceRepository.findByStaffId(employeeId);
        
        // Convert to DTOs
        return staffAttendanceList.stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
    }

    @Override
    public EmployeeAttendanceDTO getAttendanceByEmployeeIdAndDate(Long employeeId, LocalDate date) {
        // Find the attendance record
        StaffAttendance staffAttendance = staffAttendanceRepository.findByStaffIdAndAttendanceDate(employeeId, date);
        
        // Return null if not found
        if (staffAttendance == null) {
            return null;
        }
        
        // Convert to DTO
        return convertToDTO(staffAttendance);
    }

    @Override
    public List<EmployeeAttendanceDTO> getAttendanceByDateRange(LocalDate startDate, LocalDate endDate, String employeeType) {
        // Retrieve attendance records in the date range
        List<StaffAttendance> staffAttendanceList = staffAttendanceRepository.findByAttendanceDateBetween(startDate, endDate);
        
        // Filter and convert to DTOs
        return staffAttendanceList.stream()
            .filter(attendance -> filterByEmployeeType(attendance, employeeType))
            .map(this::convertToDTO)
            .collect(Collectors.toList());
    }

    @Override
    public List<EmployeeAttendanceDTO> getAttendanceByEmployeeIdAndDateRange(Long employeeId, LocalDate startDate, LocalDate endDate) {
        // Retrieve attendance records
        List<StaffAttendance> staffAttendanceList = staffAttendanceRepository.findByStaffIdAndAttendanceDateBetween(
            employeeId, startDate, endDate);
        
        // Convert to DTOs
        return staffAttendanceList.stream()
            .map(this::convertToDTO)
            .collect(Collectors.toList());
    }

    @Override
    @Transactional
    public EmployeeAttendanceDTO updateAttendance(Long id, EmployeeAttendanceDTO attendanceDTO) {
        // Find the existing record
        StaffAttendance staffAttendance = staffAttendanceRepository.findById(id)
            .orElseThrow(() -> new EntityNotFoundException("Attendance record not found with id: " + id));
        
        // Update the entity
        staffAttendance.setStatus(convertEmployeeStatusToStaffStatus(attendanceDTO.getStatus()));
        staffAttendance.setNote(attendanceDTO.getReason());
        
        // Save to database
        StaffAttendance savedAttendance = staffAttendanceRepository.save(staffAttendance);
        
        // Convert back to DTO
        return convertToDTO(savedAttendance);
    }

    @Override
    @Transactional
    public void deleteAttendance(Long id) {
        // Check if record exists
        if (!staffAttendanceRepository.existsById(id)) {
            throw new EntityNotFoundException("Attendance record not found with id: " + id);
        }
        
        // Delete from database
        staffAttendanceRepository.deleteById(id);
    }
    
    @Override
    public Map<String, Object> getMonthlyAttendanceReport(int year, int month, String employeeType) {
        // TODO: Implement report generation
        Map<String, Object> report = new HashMap<>();
        return report;
    }
    
    @Override
    public Map<String, Object> getEmployeeAttendanceStats(Long employeeId, LocalDate startDate, LocalDate endDate) {
        // TODO: Implement employee stats
        Map<String, Object> stats = new HashMap<>();
        return stats;
    }
    
    @Override
    public Map<EmployeeAttendanceStatus, Long> getOverallAttendanceStats(LocalDate startDate, LocalDate endDate, String employeeType) {
        // TODO: Implement overall stats
        Map<EmployeeAttendanceStatus, Long> stats = new HashMap<>();
        return stats;
    }
    
    @Override
    public boolean isHoliday(LocalDate date) {
        Map<String, Boolean> holidayCheck = holidayService.checkIfHoliday(date);
        return holidayCheck.getOrDefault("isHoliday", false);
    }
    
    // Conversion methods
    
    private EmployeeAttendanceDTO convertToDTO(StaffAttendance staffAttendance) {
        EmployeeAttendanceDTO dto = new EmployeeAttendanceDTO();
        
        dto.setId(staffAttendance.getId());
        dto.setEmployeeId(staffAttendance.getStaff().getId());
        dto.setEmployeeName(staffAttendance.getStaff().getFirstName() + " " + staffAttendance.getStaff().getLastName());
        
        // Set email if available
        if (staffAttendance.getStaff().getEmail() != null) {
            dto.setEmployeeEmail(staffAttendance.getStaff().getEmail());
        }
        
        // Set department if available
        if (staffAttendance.getStaff().getDepartment() != null) {
            dto.setDepartment(staffAttendance.getStaff().getDepartment());
        }
        
        // Set position/designation if available
        if (staffAttendance.getStaff().getDesignation() != null) {
            dto.setPosition(staffAttendance.getStaff().getDesignation());
        }
        
        // Set employee type based on role
        String staffRole = staffAttendance.getStaff().getStaffRole() != null ? 
            staffAttendance.getStaff().getStaffRole().getName() : null;
            
        if (staffRole != null && staffRole.toLowerCase().contains("teacher")) {
            dto.setEmployeeType("TEACHING");
        } else {
            dto.setEmployeeType("NON_TEACHING");
        }
        
        dto.setAttendanceDate(staffAttendance.getAttendanceDate());
        dto.setStatus(convertStaffStatusToEmployeeStatus(staffAttendance.getStatus()));
        dto.setReason(staffAttendance.getNote());
        
        // Set audit fields
        if (staffAttendance.getCreatedBy() != null) {
            dto.setMarkedBy(staffAttendance.getCreatedBy());
        }
        
        // Set creation and update timestamps
        dto.setCreatedAt(staffAttendance.getCreatedAt());
        dto.setUpdatedAt(staffAttendance.getUpdatedAt());
        
        return dto;
    }
    
    private StaffAttendanceStatus convertEmployeeStatusToStaffStatus(EmployeeAttendanceStatus status) {
        switch (status) {
            case PRESENT:
                return StaffAttendanceStatus.PRESENT;
            case ABSENT:
                return StaffAttendanceStatus.ABSENT;
            case HALF_DAY:
                return StaffAttendanceStatus.HALF_DAY;
            case ON_LEAVE:
                return StaffAttendanceStatus.ON_LEAVE;
            case LATE:
                return StaffAttendanceStatus.LATE;
            case HOLIDAY:
                return StaffAttendanceStatus.HOLIDAY;
            default:
                return StaffAttendanceStatus.ABSENT;
        }
    }
    
    private EmployeeAttendanceStatus convertStaffStatusToEmployeeStatus(StaffAttendanceStatus status) {
        switch (status) {
            case PRESENT:
                return EmployeeAttendanceStatus.PRESENT;
            case ABSENT:
                return EmployeeAttendanceStatus.ABSENT;
            case HALF_DAY:
                return EmployeeAttendanceStatus.HALF_DAY;
            case ON_LEAVE:
                return EmployeeAttendanceStatus.ON_LEAVE;
            case LATE:
                return EmployeeAttendanceStatus.LATE;
            case HOLIDAY:
                return EmployeeAttendanceStatus.HOLIDAY;
            default:
                return EmployeeAttendanceStatus.ABSENT;
        }
    }
}
